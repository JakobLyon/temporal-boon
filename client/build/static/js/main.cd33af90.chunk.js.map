{"version":3,"sources":["redux/selectors/temporal-boon-selectors.js","components/healer-dropdown.js","redux/actions/temporal-boon-actions.js","components/active-healer-dropdowns.js","redux/reducers/temporal-boon-reducers.js","components/boss-dropdown.js","components/boss-table.js","components/timeline/boss-spell-dropdown.js","components/timeline/healer-spell-dropdown.js","components/timeline/healer-spells.js","components/timeline/boss-spell-notes.js","components/timeline/timing-input.js","components/timeline/timeline-row.js","components/timeline/timeline-grid.js","App.js","serviceWorker.js","index.js"],"names":["selectedBoss","state","getSpellsByBoss","createSelector","bosses","spells","Object","values","filter","spell","includes","name","getHealerTypes","healerTypes","getHealers","keys","getActiveHealers","activeHealers","getTimelineData","_","sortBy","timelineData","getTimelineDataByBoss","timelineDataIdsByBoss","map","timelineDataId","getTimingByRowId","props","rowId","timing","getLastTimingForCurrentBoss","length","getHealerSpells","healerSpells","getActiveHealersWithSpells","activeHealer","objectSpread","toConsumableArray","reduce","acc","cur","defineProperty","id","getActiveHealersForSelectedBoss","activeHealersByBoss","boss","healersByBoss","healers","healerId","getCastHealerSpells","flatten","healer","castHealerSpells","getCastHealerSpellsByRowId","castHealerSpell","castSpells","castSpellId","HealerDropdown","timelineDatum","connect","_ref","value","onChange","react_default","a","createElement","react_select_browser_esm","options","label","propTypes","PropTypes","array","string","func","isRequired","defaultProps","ActiveHealerDropdowns","dispatch","changeActiveHealer","healerIDToRemove","healerTypeToAdd","castSpellsForHealer","healerIdToRemove","healerIdToAdd","type","payload","uniqueId","addActiveHealer","healerName","Number","Fragment","index","key","healerToAdd","Abyssal Commander Sivara","Blackwater Behemoth","Toxic Brand","spellId","description","frequencyOrTrigger","Frost Mark","Unstable Mixture","Toxic Spine","Bioluminescence","Shock Pulse","Wings","cooldown","Holy Shock","Ascension","Healing Tide Totem","Holy Paladin","Resto Shaman","Disc Priest","temporalBoonReducers","combineReducers","selectedRaid","arguments","undefined","action","_action$payload","_action$payload2","healerIDToAdd","newState","updateActiveHealers","_action$payload3","concat","stateWithHealerRemoved","bossName","timelineDataIdsByBossAddTimelineRow","_action$payload4","bossSpellName","notes","timelineDataRow","timelineDataCastSpells","timelineRow","castSpell","BossDropdown","setBoss","columns","Header","accessor","BossTable","react_table_es","data","minRows","showPagination","BossSpellDropdown","bossSpells","lastTimingForCurrentBoss","addTimelineRow","bossSpell","updateTimelineBossSpell","number","HealerSpellDropdown","getOptionsForHealerSpells","lastHealerCasts","lastHealerCast","reverse","find","lastHealerTiming","lastCastTiming","availableSpellIds","cooldownsForAllHealers","thisHealerHasCast","availableSpells","timingsForSpellCast","previousCast","spellCast","pop","previousCastTiming","futureCast","shift","futureCastTiming","spellOffCooldown","spellWillBeOffCooldown","availableSpell","cooldownsBySpellId","Set","cooldowns","firstAvailableHealer","option","healingSpellOptions","addHealerSpell","selection","HealerSpells","getCastHealerSpellsById","healerSpell","castSpellsIds","BossSpellNotes","updateNotes","disabled","TextField","event","currentTarget","bool","TimingInput","updateTiming","TimelineRow","TimelineGrid","timeline_row_TimelineRow","items","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","isDisabled","React","Component","Boolean","location","hostname","match","Array","prototype","sortValues","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd33af90.chunk.js","sourcesContent":["import { createSelector } from \"reselect\";\r\nimport _ from \"lodash\";\r\n\r\nexport const selectedRaid = state => state.selectedRaid;\r\nexport const selectedBoss = state => state.selectedBoss;\r\nconst getBosses = state => state.bosses;\r\nconst getSpells = state => state.spells;\r\n\r\nexport const getSpellsByBoss = createSelector(\r\n  [selectedBoss, getBosses, getSpells],\r\n  (selectedBoss, bosses, spells) => {\r\n    if (!bosses[selectedBoss]) {\r\n      return [];\r\n    }\r\n    return Object.values(spells).filter(spell =>\r\n      bosses[selectedBoss].spells.includes(spell.name)\r\n    );\r\n  }\r\n);\r\n\r\nexport const getHealerTypes = state => state.healerTypes;\r\nexport const getHealers = createSelector(\r\n  [getHealerTypes],\r\n  healerTypes => Object.keys(healerTypes)\r\n);\r\n\r\nexport const getActiveHealers = state => state.activeHealers;\r\nexport const getActiveHealersAlphabetical = createSelector(\r\n  [getActiveHealers],\r\n  activeHealers => _.sortBy(activeHealers, [\"name\"])\r\n);\r\n\r\nconst getActiveHealersByBoss = state => state.activeHealersByBoss;\r\nconst getTimelineData = state => state.timelineData;\r\nconst getTimelineDataIdsByBoss = state => state.timelineDataIdsByBoss;\r\n\r\nexport const getTimelineDataByBoss = createSelector(\r\n  [selectedBoss, getTimelineData, getTimelineDataIdsByBoss],\r\n  (selectedBoss, timelineData, timelineDataIdsByBoss) => {\r\n    if (timelineDataIdsByBoss[selectedBoss]) {\r\n      // return _.sortBy(timelineDataIdsByBoss[selectedBoss].map(timelineDataId => timelineData[timelineDataId]), ['timing'])\r\n      return timelineDataIdsByBoss[selectedBoss]\r\n        .map(timelineDataId => timelineData[timelineDataId])\r\n        .sortBy([\"timing\"]);\r\n    }\r\n    return [];\r\n  }\r\n);\r\n\r\nconst getTimingByRowId = (state, props) =>\r\n  state.timelineData[props.rowId].timing;\r\n\r\nexport const getLastTimingForCurrentBoss = createSelector(\r\n  [getTimelineDataByBoss],\r\n  timelineData => {\r\n    return timelineData.length !== 0\r\n      ? timelineData[timelineData.length - 1].timing\r\n      : -30;\r\n  }\r\n);\r\n\r\n// param healers, used cds\r\n// return cds\r\n// [{value: 'water', label: 'water'}, {...}, ...]\r\n\r\nexport const getHealerSpells = state => state.healerSpells;\r\n\r\nconst getActiveHealersWithSpells = createSelector(\r\n  [getActiveHealers, getHealerSpells, getHealerTypes],\r\n  (activeHealers, spells, healerTypes) => {\r\n    return Object.values(activeHealers)\r\n      .map(activeHealer => ({\r\n        ...activeHealer,\r\n        spells: [\r\n          ...healerTypes[activeHealer.name].spells.map(spell => spells[spell])\r\n        ]\r\n      }))\r\n      .reduce((acc, cur) => {\r\n        return {\r\n          ...acc,\r\n          [cur.id]: {\r\n            ...cur\r\n          }\r\n        };\r\n      }, {});\r\n  }\r\n);\r\n\r\n/*\r\n  return: array\r\n  [{\r\n    name: 'Holy Paladin',\r\n    id: 1,\r\n    spells: [{name: 'Wings', id: 1, cooldown: 1}]\r\n  }, ...]\r\n*/\r\nexport const getActiveHealersForSelectedBoss = createSelector(\r\n  [selectedBoss, getActiveHealersByBoss, getActiveHealersWithSpells],\r\n  (boss, healersByBoss, healers) => {\r\n    return healersByBoss[boss]\r\n      ? _.sortBy(healersByBoss[boss].map(healerId => healers[healerId]), [\r\n          \"name\"\r\n        ])\r\n      : [];\r\n  }\r\n);\r\n\r\n// returns only healer spells for active healers\r\nexport const getHealerSpellsForActiveHealers = createSelector(\r\n  [getHealerSpells, getActiveHealers, getHealerTypes],\r\n  (healerSpells, activeHealers, healerTypes) => {\r\n    return _.flatten(\r\n      Object.values(activeHealers).map(healer =>\r\n        healerTypes[healer.name].spells.map(spell => healerSpells[spell])\r\n      )\r\n    );\r\n  }\r\n);\r\n\r\n/*\r\nRecord of when healers cast their spells\r\n\r\n{\r\n  [id]: {\r\n    healerId,\r\n    spellId,\r\n    timing\r\n  },\r\n  ...\r\n}\r\n*/\r\n\r\nexport const getCastHealerSpells = state => state.castHealerSpells;\r\nconst getCastHealerSpellsByRowId = (state, props) => {\r\n  return Object.values(state.castHealerSpells).filter(castHealerSpell =>\r\n    props.castSpells.includes(castHealerSpell.castSpellId)\r\n  );\r\n};\r\n\r\nexport const makeGetCastHealerSpellsByRowId = () => {\r\n  return createSelector(\r\n    [getCastHealerSpellsByRowId, getHealerSpells],\r\n    (castHealerSpells, healerSpells) =>\r\n      // i hate this, we could change healerSpells to be id keyed instead of string keyed so that its simply healerSpells[castHeaerSpell.spellId]\r\n      castHealerSpells.map(castHealerSpell =>\r\n        Object.values(healerSpells).find(\r\n          healerSpell => healerSpell.id === castHealerSpell.spellId\r\n        )\r\n      )\r\n  );\r\n};\r\n\r\nexport const makeGetOptionsForActiveHealerSpells = () => {\r\n  return createSelector(\r\n    [\r\n      getActiveHealersForSelectedBoss,\r\n      getHealerTypes,\r\n      getCastHealerSpells,\r\n      getTimingByRowId,\r\n      getHealerSpells\r\n    ],\r\n    (activeHealers, healerTypes, castHealerSpells, timing, healerSpells) => {\r\n      // TODO - make separate selector to memoize for performance\r\n      const lastHealerCasts = activeHealers.reduce((cur, activeHealer) => {\r\n        const lastHealerCast = _.sortBy(\r\n          Object.values(castHealerSpells).filter(\r\n            castHealerSpell => castHealerSpell.healerId === activeHealer.id\r\n          ),\r\n          [\"timing\"]\r\n        )\r\n          .reverse()\r\n          .find(castHealerSpell => castHealerSpell.timing <= timing);\r\n\r\n        const lastHealerTiming =\r\n          lastHealerCast !== undefined ? lastHealerCast.timing : 0;\r\n\r\n        return [\r\n          ...cur,\r\n          { healerId: activeHealer.id, lastCastTiming: lastHealerTiming }\r\n        ];\r\n      }, []);\r\n\r\n      let availableSpellIds = [];\r\n\r\n      // STEP 0 - remove spells on cooldown\r\n      // TODO explore if we can remove flatten in favor of a reduce\r\n      const cooldownsForAllHealers = _.flatten(\r\n        // for each active healer\r\n        Object.values(activeHealers).map(activeHealer => {\r\n          // get the spells they've cast\r\n          const thisHealerHasCast = Object.values(castHealerSpells).filter(\r\n            castHealerSpell => castHealerSpell.healerId === activeHealer.id\r\n          );\r\n          //\r\n          const availableSpells = activeHealer.spells.filter(spell => {\r\n            const timingsForSpellCast = thisHealerHasCast.filter(\r\n              castSpell => castSpell.spellId === spell.id\r\n            );\r\n            // healer hasn't cast this spell, meaning it is available\r\n            if (timingsForSpellCast.length === 0) {\r\n              return true;\r\n            }\r\n\r\n            const previousCast = _.sortBy(\r\n              timingsForSpellCast.filter(\r\n                spellCast => spellCast.timing <= timing\r\n              ),\r\n              [\"timing\"]\r\n            ).pop();\r\n            const previousCastTiming =\r\n              previousCast !== undefined ? previousCast.timing : null;\r\n\r\n            const futureCast = _.sortBy(\r\n              timingsForSpellCast.filter(\r\n                spellCast => spellCast.timing > timing\r\n              ),\r\n              [\"timing\"]\r\n            ).shift();\r\n            const futureCastTiming =\r\n              futureCast !== undefined ? futureCast.timing : null;\r\n\r\n            const spellOffCooldown =\r\n              previousCastTiming || previousCastTiming === 0\r\n                ? timing - spell.cooldown >= previousCastTiming\r\n                : true;\r\n            const spellWillBeOffCooldown = futureCastTiming\r\n              ? timing + spell.cooldown <= futureCastTiming\r\n              : true;\r\n\r\n            return spellOffCooldown && spellWillBeOffCooldown;\r\n          });\r\n\r\n          availableSpellIds = [\r\n            ...availableSpellIds,\r\n            ...availableSpells.map(spell => spell.id)\r\n          ];\r\n          return availableSpells.map(availableSpell => ({\r\n            ...availableSpell,\r\n            healerId: activeHealer.id\r\n          }));\r\n        })\r\n      );\r\n\r\n      // get unique spell ids\r\n      availableSpellIds = [...new Set(availableSpellIds)];\r\n\r\n      //STEP 2 - organize by spell id\r\n      const cooldownsBySpellId = availableSpellIds.reduce((acc, spellId) => {\r\n        return {\r\n          ...acc,\r\n          [spellId]: [\r\n            ...cooldownsForAllHealers.filter(\r\n              cooldown => cooldown.id === spellId\r\n            )\r\n          ]\r\n        };\r\n      }, {});\r\n\r\n      // STEP 3 - reduce cooldownsBySpellId to get one cooldown per spell id\r\n      const optionsForActiveHealerSpells = Object.values(\r\n        cooldownsBySpellId\r\n      ).reduce((cur, cooldowns) => {\r\n        const firstAvailableHealer = _.sortBy(\r\n          lastHealerCasts.filter(lastHealerCast =>\r\n            cooldowns.find(\r\n              cooldown => cooldown.healerId === lastHealerCast.healerId\r\n            )\r\n          ),\r\n          [\"timing\"]\r\n        ).shift();\r\n\r\n        const cooldown = cooldowns.find(\r\n          cooldown => cooldown.healerId === firstAvailableHealer.healerId\r\n        );\r\n\r\n        return [...cur, cooldown];\r\n      }, []);\r\n\r\n      return optionsForActiveHealerSpells.map(option => ({\r\n        value: option.name,\r\n        label: option.name,\r\n        spellId: option.id,\r\n        healerId: option.healerId\r\n      }));\r\n    }\r\n  );\r\n};\r\n\r\nexport const getCompleteTimelineData = createSelector(\r\n  [getTimelineData, getCastHealerSpells],\r\n  (timelineData, castHealerSpells) => {\r\n    return Object.values(timelineData).map(timelineDatum => ({\r\n      ...timelineDatum,\r\n      castSpells: timelineDatum.castSpells.map(\r\n        castSpellId => castHealerSpells[castSpellId]\r\n      )\r\n    }));\r\n  }\r\n);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Select from 'react-select';\r\nimport { connect } from 'react-redux';\r\nimport { getHealers } from '../redux/selectors/temporal-boon-selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n  healers: getHealers(state)\r\n});\r\n\r\nexport const HealerDropdown = connect(mapStateToProps)(({healers, value, onChange}) => (\r\n  value ? (\r\n    <Select\r\n      options={healers.map(healer => ({value: healer, label: healer}))}\r\n      value={{value: value, label: value}}\r\n      onChange={healer => onChange(healer.value)}\r\n    />\r\n  ) : (\r\n    <Select\r\n      options={healers.map(healer => ({value: healer, label: healer}))}\r\n      onChange={healer => onChange(healer.value)}\r\n      value={{value: 'Select...', label: 'Select...'}}\r\n    />\r\n  )\r\n));\r\n\r\nHealerDropdown.propTypes = {\r\n  healers: PropTypes.array,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired\r\n}\r\n\r\nHealerDropdown.defaultProps = {\r\n  healers: [],\r\n  value: null\r\n};\r\n\r\n","export const SET_BOSS = 'SET_BOSS';\r\nexport const ADD_ACTIVE_HEALER = 'ADD_ACTIVE_HEALER';\r\nexport const CHANGE_ACTIVE_HEALER = 'CHANGE_ACTIVE_HEALER';\r\n\r\n// Timeline action types\r\nexport const ADD_TIMELINE_ROW = 'ADD_TIMELINE_ROW';\r\nexport const UPDATE_TIMELINE_BOSS_SPELL = 'UPDATE_TIMELINE_BOSS_SPELL';\r\nexport const UPDATE_TIMING = 'UPDATE_TIMING';\r\nexport const UPDATE_NOTES = 'UPDATE_NOTES';\r\nexport const ADD_HEALER_SPELL = 'ADD_HEALER_SPELL';\r\n\r\nexport const setBoss = boss => ({\r\n  type: SET_BOSS,\r\n  boss\r\n});\r\n\r\nexport const addActiveHealer = (activeHealer, id, selectedBoss) => ({\r\n  type: ADD_ACTIVE_HEALER,\r\n  payload: {\r\n    activeHealer,\r\n    id,\r\n    selectedBoss\r\n  }\r\n});\r\n\r\nexport const changeActiveHealer = (healerIdToRemove, healerTypeToAdd, healerIdToAdd, selectedBoss, castSpellsForHealer) => ({\r\n  type: CHANGE_ACTIVE_HEALER,\r\n  payload: {\r\n    healerIdToRemove,\r\n    healerTypeToAdd,\r\n    healerIdToAdd,\r\n    selectedBoss,\r\n    castSpellsForHealer\r\n  }\r\n});\r\n\r\n// Timeline action creators\r\nexport const addTimelineRow = (bossName, bossSpellName, id, timing) => ({\r\n  type: ADD_TIMELINE_ROW,\r\n  payload: {\r\n    bossName,\r\n    bossSpellName,\r\n    id,\r\n    timing\r\n  }\r\n});\r\n\r\nexport const updateTimelineBossSpell = (bossSpellName, id) => ({\r\n  type: UPDATE_TIMELINE_BOSS_SPELL,\r\n  payload: {\r\n    bossSpellName,\r\n    id\r\n  }\r\n});\r\n\r\nexport const updateTiming = (timing, id) => ({\r\n  type: UPDATE_TIMING,\r\n  payload: {\r\n    timing,\r\n    id\r\n  }\r\n})\r\n\r\nexport const updateNotes = (notes, id) => ({\r\n  type: UPDATE_NOTES,\r\n  payload: {\r\n    notes,\r\n    id\r\n  }\r\n})\r\n\r\nexport const addHealerSpell = (rowId, healerId, castSpellId, spellId, timing) => ({\r\n  type: ADD_HEALER_SPELL,\r\n  payload: {\r\n    rowId,\r\n    healerId,\r\n    castSpellId,\r\n    spellId,\r\n    timing\r\n  }\r\n})","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { HealerDropdown } from './healer-dropdown';\r\nimport { getActiveHealersForSelectedBoss, selectedBoss, getCastHealerSpells } from '../redux/selectors/temporal-boon-selectors';\r\nimport { changeActiveHealer, addActiveHealer } from '../redux/actions/temporal-boon-actions';\r\nimport _ from 'lodash';\r\n\r\nconst mapStateToProps = state => ({\r\n  activeHealers: getActiveHealersForSelectedBoss(state),\r\n  selectedBoss: selectedBoss(state),\r\n  castHealerSpells: getCastHealerSpells(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  changeActiveHealer: (healerIDToRemove, healerTypeToAdd, selectedBoss, castSpellsForHealer) =>\r\n    dispatch(changeActiveHealer(healerIDToRemove, healerTypeToAdd, _.uniqueId(), selectedBoss, castSpellsForHealer)),\r\n  addActiveHealer: (healerName, selectedBoss) =>\r\n    dispatch(addActiveHealer(healerName, Number(_.uniqueId()), selectedBoss))\r\n});\r\n\r\nexport const ActiveHealerDropdowns = connect(mapStateToProps, mapDispatchToProps)(\r\n  ({\r\n    activeHealers,\r\n    selectedBoss,\r\n    changeActiveHealer,\r\n    addActiveHealer,\r\n    castHealerSpells\r\n  }) => {\r\n  return (\r\n    <React.Fragment>\r\n      {activeHealers.map((healer, index) => {\r\n        const castSpellsForHealer =\r\n          Object.values(castHealerSpells)\r\n              .filter(castHealerSpell => castHealerSpell.healerId === healer.id)\r\n              .map(castHealerSpell => castHealerSpell.castSpellId);\r\n        return (\r\n          <HealerDropdown\r\n            key={index}\r\n            value={healer.name}\r\n            onChange={healerToAdd => changeActiveHealer(healer.id, healerToAdd, selectedBoss, castSpellsForHealer)}\r\n          />\r\n        )\r\n      }\r\n      )}\r\n      <HealerDropdown onChange={healerToAdd => addActiveHealer(healerToAdd, selectedBoss)}/>\r\n    </React.Fragment>\r\n  )\r\n});","import { combineReducers } from 'redux';\r\nimport {\r\n  SET_BOSS,\r\n  ADD_ACTIVE_HEALER,\r\n  CHANGE_ACTIVE_HEALER,\r\n  ADD_TIMELINE_ROW,\r\n  UPDATE_TIMELINE_BOSS_SPELL,\r\n  UPDATE_TIMING,\r\n  UPDATE_NOTES,\r\n  ADD_HEALER_SPELL\r\n} from '../actions/temporal-boon-actions';\r\n\r\nconst currentRaid = 'The Eternal Palace';\r\nconst currentBoss = 'Abyssal Commander Sivara';\r\n\r\nconst bosses = {\r\n  'Abyssal Commander Sivara': {\r\n    spells: [\r\n      'Toxic Brand',\r\n      'Frost Mark',\r\n      'Unstable Mixture'\r\n    ]\r\n  },\r\n  'Blackwater Behemoth': {\r\n    spells: [\r\n      'Toxic Spine',\r\n      'Bioluminescence',\r\n      'Shock Pulse'\r\n    ]\r\n  }\r\n};\r\n\r\nconst spells = {\r\n  'Toxic Brand': {\r\n    name: 'Toxic Brand',\r\n    spellId: 294715,\r\n    description: 'Marks the player with a poisonous brand, inflicting 8717 Nature damage every 5 seconds and reduces healing received by 5%. This effect stacks.',\r\n    frequencyOrTrigger: 'Applied at the beginning of the encounter. Stacks throughout the fight. Stacks reset when you take Frost damage.'\r\n  },\r\n  'Frost Mark': {\r\n    name: 'Frost Mark',\r\n    spellId: 294711,\r\n    description: 'Marks the player with a frigid brand, inflicting 1745 Frost damage every 1 sec and reducing movement speed by 5%. This effect stacks.',\r\n    frequencyOrTrigger: 'Applied at the beginning of the encounter. Stacks throughout the fight. Stacks reset when you take Nature damage.'\r\n  },\r\n  'Unstable Mixture': {\r\n    name: 'Unstable Mixture',\r\n    spellId: 294847,\r\n    description: 'A mix of poisons catalyzes in the player, causing them to explode, inflicting 7144 Nature damage to all allies every 1 sec for 3 sec.',\r\n    frequencyOrTrigger: 'Occurs any time a player is hit by the opposite damage type. Will happen by accident and will also happen at set periods due to the need to reset stacks of Toxic Brand or Frost Mark. Exact timings of this will be based on strat used.'\r\n  },\r\n  'Toxic Spine': {\r\n    name: 'Toxic Spine',\r\n    spellId: 292167,\r\n    description: 'Fires a set of Toxic Spines at Multiple Players, inflicting 57100 Nature damage every 3 sec for 12 sec.',\r\n    frequencyOrTrigger: 'Every 30 seconds while on a platform. Lasts 12 seconds.'\r\n  },\r\n  'Bioluminescence': {\r\n    name: 'Bioluminescence',\r\n    spellId: 292133,\r\n    description: 'Blocks the effects of Darkest Depths, enabling incoming healing as normal.',\r\n    frequencyOrTrigger: 'Should be up most of the platform. Aquired by killing the Pufferfish. Track when not present on target.'\r\n  },\r\n  'Shock Pulse': {\r\n    name: 'Shock Pulse',\r\n    spellId: 292279,\r\n    description: 'Inflicts up to 270000 Nature damage to all players, decreasing in damage the further away players are from the Behemoth. The damage reduction over distance ends at 80 yards away.',\r\n    frequencyOrTrigger: 'Every 30 seconds while on platform.'\r\n  }\r\n}\r\n\r\nconst healerSpells = {\r\n  'Wings': {\r\n    name: 'Wings',\r\n    cooldown: 90,\r\n    id: 1\r\n  },\r\n  'Holy Shock': {\r\n    name: 'Holy Shock',\r\n    cooldown: 60,\r\n    id: 2\r\n  },\r\n  'Ascension': {\r\n    name: 'Ascension',\r\n    cooldown: 120,\r\n    id: 3\r\n  },\r\n  'Healing Tide Totem': {\r\n    name: 'Healing Tide Totem',\r\n    cooldown: 60,\r\n    id: 4\r\n  }\r\n};\r\n\r\nconst healerTypes = {\r\n  'Holy Paladin': {\r\n    name: 'Holy Paladin',\r\n    id: 1,\r\n    spells: [\r\n      'Wings', 'Holy Shock'\r\n    ]\r\n  },\r\n  'Resto Shaman': {\r\n    name: 'Resto Shaman',\r\n    id: 2,\r\n    spells: [\r\n      'Ascension', 'Healing Tide Totem'\r\n    ]\r\n  },\r\n  'Disc Priest': {\r\n    name: 'Disc Priest',\r\n    id: 3\r\n  }\r\n};\r\n\r\nconst updateActiveHealers = (state, healerIDToRemove, healerTypeToAdd, healerIDToAdd) => {\r\n  const newState = {...state, [healerIDToAdd]: {id: healerIDToAdd, name: healerTypeToAdd}};\r\n  delete newState[healerIDToRemove];\r\n  return newState;\r\n}\r\n\r\nconst selectedRaidReducer = (state = currentRaid, action) => {\r\n  return state;\r\n}\r\n\r\nconst selectedBossReducer = (state = currentBoss, action) => {\r\n  switch (action.type) {\r\n    case SET_BOSS:\r\n      return action.boss;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst bossesReducer = (state = bosses, action) => {\r\n  return state;\r\n}\r\n\r\nconst spellsReducer = (state = spells, action) => {\r\n  return state;\r\n}\r\n\r\n/*\r\n  Healer ID: information for that healer\r\n\r\n  [id]: {\r\n    type,\r\n    id,\r\n    spells: [1, 2, 3]\r\n  },\r\n  [id2]: {...},\r\n  ...\r\n*/\r\nconst activeHealersReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ADD_ACTIVE_HEALER:\r\n      const {activeHealer, id} = action.payload;\r\n      return {...state, [id]: {name: activeHealer, id}};\r\n    case CHANGE_ACTIVE_HEALER:\r\n      const {healerIdToRemove, healerTypeToAdd, healerIdToAdd} = action.payload;\r\n      return updateActiveHealers(state, healerIdToRemove, healerTypeToAdd, healerIdToAdd)\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/*\r\n  Healer ids for each boss\r\n\r\n  {\r\n    'Boss Name': [\r\n      1, 2, 3, ...\r\n    ],\r\n    'Boss Name 2': [\r\n      4, 5, 6, ...\r\n    ],\r\n    ...\r\n  }\r\n*/\r\nconst activeHealersByBossReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ADD_ACTIVE_HEALER: \r\n      const {selectedBoss, id} = action.payload;\r\n      return state[selectedBoss]\r\n        ? {...state, [selectedBoss]: [...state[selectedBoss], id]}\r\n        : {...state, [selectedBoss]: [id]};\r\n    case CHANGE_ACTIVE_HEALER:\r\n      const stateWithHealerRemoved =\r\n        state[action.payload.selectedBoss].filter(healerId => healerId !== action.payload.healerIdToRemove);\r\n      return {...state, [action.payload.selectedBoss]: [...stateWithHealerRemoved, action.payload.healerIdToAdd]};\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst timelineDataIdsByBossAddTimelineRow = (state, payload) => {\r\n  const {bossName, id} = payload;\r\n  if (state[bossName]) {\r\n    return {\r\n      ...state,\r\n      [bossName]: [\r\n        ...state[bossName],\r\n        id\r\n      ]\r\n    };\r\n  }\r\n  return {\r\n    ...state,\r\n    [bossName]: [\r\n      id\r\n    ]\r\n  };\r\n}\r\n\r\n/*\r\n  {\r\n    'Lady Ashvane': [\r\n      1, 2, 3\r\n    ],\r\n    'Tectus': [\r\n      4, 5, 6\r\n    ]\r\n  }\r\n*/\r\nconst timelineDataIdsByBossReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ADD_TIMELINE_ROW:\r\n      return timelineDataIdsByBossAddTimelineRow(state, action.payload);\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n/* \r\n  Holds data for a row in the Timeline\r\n\r\n  {\r\n    [id]: {\r\n      bossSpellName: 'Toxic Mark',\r\n      timing: 30,\r\n      castSpells: [1, 2, ...],\r\n      id\r\n    }\r\n  }\r\n*/\r\nconst timelineDataReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ADD_TIMELINE_ROW:\r\n      const {bossSpellName, id, timing} = action.payload;\r\n      return {\r\n        ...state,\r\n        [id]: {\r\n          bossSpellName,\r\n          id,\r\n          timing,\r\n          castSpells: []\r\n        }\r\n      };\r\n    case UPDATE_TIMELINE_BOSS_SPELL:\r\n      return {\r\n        ...state,\r\n        [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          bossSpellName: action.payload.bossSpellName\r\n        }\r\n      }\r\n    case UPDATE_TIMING:\r\n      return {\r\n        ...state,\r\n        [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          timing: action.payload.timing\r\n        }\r\n      }\r\n    case UPDATE_NOTES: \r\n      return {\r\n        ...state,\r\n        [action.payload.id]: {\r\n          ...state[action.payload.id],\r\n          notes: action.payload.notes\r\n        }\r\n      }\r\n    case ADD_HEALER_SPELL:\r\n      const timelineDataRow = state[action.payload.rowId];\r\n      const timelineDataCastSpells = timelineDataRow.castSpells;\r\n      return {\r\n        ...state,\r\n        [action.payload.rowId]: {\r\n          ...timelineDataRow,\r\n          castSpells: [...timelineDataCastSpells, action.payload.castSpellId]\r\n        }\r\n      };\r\n    case CHANGE_ACTIVE_HEALER:\r\n      return Object.values(state).reduce(\r\n        (cur, timelineRow) => {\r\n          return {\r\n            ...cur,\r\n            [timelineRow.id]: {\r\n              ...timelineRow,\r\n              castSpells: timelineRow.castSpells.filter(castSpell =>\r\n                !action.payload.castSpellsForHealer.includes(castSpell))\r\n            }\r\n          }\r\n        },\r\n        {}\r\n      )\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\n/*\r\n{\r\n  [castSpellId]: {\r\n    castSpellId: 3\r\n    healerId: 1,\r\n    spellId: 1,\r\n    timing: 30\r\n  },\r\n  ...\r\n\r\n}\r\n*/\r\nconst castHealerSpellsReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case ADD_HEALER_SPELL:\r\n      return {\r\n        ...state,\r\n        [action.payload.castSpellId]: {\r\n          castSpellId: action.payload.castSpellId,\r\n          healerId: action.payload.healerId,\r\n          spellId: action.payload.spellId,\r\n          timing: action.payload.timing\r\n        }\r\n      }\r\n    case CHANGE_ACTIVE_HEALER:\r\n      const newState = Object.values(state).reduce(\r\n        (acc, cur) => {\r\n          if (!action.payload.castSpellsForHealer.includes(cur.castSpellId)) {\r\n            return {\r\n              ...acc,\r\n              [cur.id]: {\r\n                ...cur\r\n              }\r\n            }\r\n          }\r\n          return acc;\r\n        },\r\n        {}\r\n      );\r\n      \r\n      return newState;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport const temporalBoonReducers = combineReducers({\r\n selectedRaid: selectedRaidReducer,\r\n selectedBoss: selectedBossReducer,\r\n bosses: bossesReducer,\r\n spells: spellsReducer,\r\n healerTypes: () => healerTypes,\r\n healerSpells: () => healerSpells,\r\n activeHealers: activeHealersReducer,\r\n activeHealersByBoss: activeHealersByBossReducer,\r\n // TODO: make these nested in a subreducer, put in separate file\r\n timelineDataIdsByBoss: timelineDataIdsByBossReducer,\r\n timelineData: timelineDataReducer,\r\n castHealerSpells: castHealerSpellsReducer\r\n});","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Select from 'react-select';\r\nimport {selectedBoss} from '../redux/selectors/temporal-boon-selectors';\r\nimport {setBoss} from '../redux/actions/temporal-boon-actions';\r\n\r\nconst mapStateToProps = state => ({\r\n  boss: selectedBoss(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  setBoss: boss => \r\n    dispatch(setBoss(boss.value))\r\n});\r\n\r\nexport const BossDropdown = connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(({\r\n  boss,\r\n  setBoss,\r\n  options\r\n}) => (\r\n  <Select\r\n    value={{value: boss, label: boss}}\r\n    onChange={setBoss}\r\n    options={options}\r\n  />\r\n));\r\n","import React from 'react';\r\nimport ReactTable from 'react-table';\r\nimport {connect} from 'react-redux';\r\nimport 'react-table/react-table.css';\r\n\r\nimport {getSpellsByBoss} from '../redux/selectors/temporal-boon-selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n  spells: getSpellsByBoss(state)\r\n\r\n});\r\n\r\nconst columns = [{\r\n  Header: 'Spell Name',\r\n  accessor: 'name'\r\n}, {\r\n  Header: 'Spell ID',\r\n  accessor: 'spellId'\r\n}, {\r\n  Header: 'Description',\r\n  accessor: 'description'\r\n}, {\r\n  Header: 'Frequency/Trigger',\r\n  accessor: 'frequencyOrTrigger'\r\n}];\r\n\r\nexport const BossTable = connect(mapStateToProps)(({spells}) => (\r\n <ReactTable\r\n  data={spells}\r\n  columns={columns}\r\n  minRows={0}\r\n  showPagination={false}\r\n />\r\n));","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport Select from 'react-select';\r\nimport { getSpellsByBoss, selectedBoss, getLastTimingForCurrentBoss } from '../../redux/selectors/temporal-boon-selectors';\r\nimport { addTimelineRow, updateTimelineBossSpell } from '../../redux/actions/temporal-boon-actions';\r\nimport _ from 'lodash';\r\n\r\nconst DEFAULT_TIMING_OFFSET = 30;\r\n\r\nconst mapStateToProps = state => ({\r\n    bossSpells: getSpellsByBoss(state).map(spell => ({value: spell.name, label: spell.name})),\r\n    selectedBoss: selectedBoss(state),\r\n    lastTimingForCurrentBoss: getLastTimingForCurrentBoss(state)\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addTimelineRow: (bossSpell, selectedBoss, timing) =>\r\n        dispatch(addTimelineRow(selectedBoss, bossSpell, Number(_.uniqueId()), timing)),\r\n    updateTimelineBossSpell: (bossSpell, id) => dispatch(updateTimelineBossSpell(bossSpell, id))\r\n});\r\n\r\nexport const BossSpellDropdown = connect(mapStateToProps, mapDispatchToProps)(\r\n    ({bossSpells,\r\n    selectedBoss,\r\n    id,\r\n    bossSpellName,\r\n    addTimelineRow,\r\n    updateTimelineBossSpell,\r\n    lastTimingForCurrentBoss\r\n    }) => (\r\n        <React.Fragment>\r\n            <Select\r\n                options={bossSpells}\r\n                onChange={id\r\n                    ? (bossSpell) => updateTimelineBossSpell(bossSpell.value, id)\r\n                    : (bossSpell) => addTimelineRow(bossSpell.value, selectedBoss, lastTimingForCurrentBoss + DEFAULT_TIMING_OFFSET)}\r\n                value={bossSpellName ? {value: bossSpellName, label: bossSpellName} : null}\r\n            />\r\n        </React.Fragment>\r\n));\r\n\r\nBossSpellDropdown.propTypes = {\r\n    bossSpells: PropTypes.array,\r\n    selectedBoss: PropTypes.string,\r\n    id: PropTypes.number,\r\n    bossSpellName: PropTypes.string,\r\n    addTimelineRow: PropTypes.func\r\n};\r\n\r\nBossSpellDropdown.defaultProps = {\r\n    bossSpells: [],\r\n    id: null,\r\n    bossSpellName: null,\r\n    addTimelineRow(){},\r\n    updateTimelineBossSpell(){}\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux'; \r\nimport { makeGetOptionsForActiveHealerSpells,\r\n  getActiveHealers,\r\n  getCastHealerSpells\r\n} from '../../redux/selectors/temporal-boon-selectors';\r\nimport _ from 'lodash';\r\n\r\nimport { addHealerSpell } from '../../redux/actions/temporal-boon-actions';\r\nimport Select from 'react-select';\r\n\r\nconst makeMapStateToProps = () => {\r\n    const getOptionsForHealerSpells = makeGetOptionsForActiveHealerSpells();\r\n    return (state, props) => {\r\n        return {\r\n            healingSpellOptions: getOptionsForHealerSpells(state, props), \r\n            activeHealers: getActiveHealers(state),\r\n            castSpells: getCastHealerSpells(state)\r\n        }\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    addHealerSpell: (timing, rowId, spellId, healerId) => {\r\n      dispatch(addHealerSpell(rowId, healerId, Number(_.uniqueId()), spellId, timing))\r\n    }\r\n});\r\n\r\nexport const HealerSpellDropdown = connect(makeMapStateToProps, mapDispatchToProps)(\r\n    ({rowId,\r\n      timing,\r\n      addHealerSpell,\r\n      healingSpellOptions,\r\n      value\r\n    }) => {\r\n      return (\r\n        <Select\r\n            onChange={selection => {addHealerSpell(timing, rowId, selection.spellId, selection.healerId)}}\r\n            options={healingSpellOptions}\r\n            value={value}\r\n        />)\r\n      }\r\n);\r\n\r\nHealerSpellDropdown.propTypes = {\r\n  rowId: PropTypes.number.isRequired,\r\n  timing: PropTypes.number.isRequired,\r\n  addHealerSpell: PropTypes.func,\r\n  healingSpellOptions: PropTypes.array,\r\n  value: PropTypes.object\r\n};\r\n\r\nHealerSpellDropdown.defaultProps = {\r\n  addHealerSpell(){},\r\n  healingSpellOptions: [],\r\n  value: {value: 'Select...', label: 'Select...'}\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { makeGetCastHealerSpellsByRowId } from '../../redux/selectors/temporal-boon-selectors';\r\n\r\nimport { HealerSpellDropdown } from './healer-spell-dropdown';\r\n\r\nconst makeMapStateToProps = () => {\r\n    const getCastHealerSpellsById = makeGetCastHealerSpellsByRowId();\r\n    return (state, props) => ({\r\n        castSpells: getCastHealerSpellsById(state, props)\r\n    })\r\n}\r\n\r\nexport const HealerSpells = connect(makeMapStateToProps)(({rowId, timing, castSpells, castSpellsIds}) => (\r\n    <React.Fragment>\r\n        {castSpells.map(castSpell =>\r\n        {\r\n            return (<HealerSpellDropdown\r\n                key={castSpell.id}\r\n                rowId={rowId}\r\n                timing={timing}\r\n                value={{value: castSpell.name, label: castSpell.name}}\r\n            />)\r\n            })}\r\n        <HealerSpellDropdown\r\n            key={0}\r\n            rowId={rowId}\r\n            timing={timing}\r\n            value=\"Select...\"\r\n        />\r\n    </React.Fragment>\r\n));","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { updateNotes } from \"../../redux/actions/temporal-boon-actions\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateNotes: (notes, id) => dispatch(updateNotes(notes, id))\r\n});\r\n\r\nexport const BossSpellNotes = connect(\r\n  null,\r\n  mapDispatchToProps\r\n)(({ id, value, updateNotes, disabled }) => (\r\n  <TextField\r\n    label=\"Notes\"\r\n    onChange={event => updateNotes(event.currentTarget.value, id)}\r\n    value={value}\r\n    disabled={disabled}\r\n  />\r\n));\r\n\r\nBossSpellNotes.propTypes = {\r\n  id: PropTypes.number,\r\n  value: PropTypes.string,\r\n  updateNotes: PropTypes.func,\r\n  disabled: PropTypes.bool\r\n};\r\n\r\nBossSpellNotes.defaultProps = {\r\n  id: null,\r\n  value: \"\",\r\n  updateNotes() {},\r\n  disabled: false\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { TextField } from '@material-ui/core';\r\nimport { updateTiming } from '../../redux/actions/temporal-boon-actions';\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateTiming: (timing, id) => dispatch(updateTiming(timing, id))\r\n});\r\n\r\nexport const TimingInput = connect(null, mapDispatchToProps)(\r\n  ({disabled,\r\n  value,\r\n  updateTiming,\r\n  id}) => (\r\n    <TextField\r\n      value={value}\r\n      disabled={disabled}\r\n      type={'number'}\r\n      onChange={event => updateTiming(Number(event.currentTarget.value), id)}\r\n    />\r\n));\r\n\r\nTimingInput.propTypes = {\r\n  disabled: PropTypes.bool,\r\n  value: PropTypes.number,\r\n  id: PropTypes.number,\r\n  updateTiming: PropTypes.func\r\n};\r\n\r\nTimingInput.defaultProps = {\r\n  disabled: false,\r\n  value: null,\r\n  id: null,\r\n  updateTiming(){}\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { BossSpellDropdown } from './boss-spell-dropdown';\r\nimport { HealerSpells } from './healer-spells';\r\nimport { BossSpellNotes } from './boss-spell-notes';\r\nimport { TimingInput } from './timing-input';\r\n\r\nexport const TimelineRow = ({id, bossSpellName, timing, notes, castSpells}) => (\r\n    <React.Fragment>\r\n        <p>{id ? '' : 'new'} healer cd row</p>\r\n        <BossSpellDropdown\r\n            id={id}\r\n            bossSpellName={bossSpellName}\r\n        />\r\n        {id &&\r\n            <React.Fragment> \r\n                <TimingInput\r\n                    value={timing}\r\n                    disabled={!id}\r\n                    id={id}\r\n                />\r\n                <HealerSpells\r\n                    rowId={id}\r\n                    timing={timing}\r\n                    castSpells={castSpells}\r\n                />\r\n                <BossSpellNotes\r\n                    id={id}\r\n                    disabled={!id}\r\n                    value={notes}\r\n                />\r\n            </React.Fragment>\r\n        }\r\n    </React.Fragment>\r\n)\r\n\r\nTimelineRow.propTypes = {\r\n    id: PropTypes.number,\r\n    bossSpellName: PropTypes.string,\r\n    timing: PropTypes.number\r\n};\r\n\r\nTimelineRow.defaultProps = {\r\n    id: null,\r\n    bossSpellName: null,\r\n    timing: null\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { TimelineRow } from './timeline-row';\r\nimport { getTimelineDataByBoss } from '../../redux/selectors/temporal-boon-selectors';\r\n\r\nconst mapStateToProps = state => ({\r\n  timelineData: getTimelineDataByBoss(state)\r\n});\r\n\r\nexport const TimelineGrid = connect(mapStateToProps)(({timelineData}) => (\r\n  <React.Fragment>\r\n    <p>healer cd grid</p>\r\n    {timelineData.map(data =>\r\n      <TimelineRow\r\n        id={data.id}\r\n        bossSpellName={data.bossSpellName}\r\n        timing={data.timing}\r\n        notes={data.notes}\r\n        castSpells={data.castSpells}\r\n      />\r\n    )}\r\n    <TimelineRow/>\r\n  </React.Fragment>\r\n));\r\n\r\nTimelineGrid.propTypes = {\r\n  timelineData: PropTypes.array\r\n};\r\n\r\nTimelineGrid.defaultProps = {\r\n  timelineData: []\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport { ActiveHealerDropdowns } from './components/active-healer-dropdowns';\r\n\r\nimport Select from 'react-select';\r\nimport { createStore } from 'redux';\r\nimport { temporalBoonReducers } from './redux/reducers/temporal-boon-reducers';\r\nimport { Provider } from 'react-redux';\r\nimport { BossDropdown } from './components/boss-dropdown';\r\nimport { BossTable } from './components/boss-table';\r\nimport { TimelineGrid } from './components/timeline/timeline-grid';\r\n\r\nconst items = [\r\n  { value: 'Abyssal Commander Sivara', label: 'Abyssal Commander Sivara' },\r\n  { value: 'Blackwater Behemoth', label: 'Blackwater Behemoth' },\r\n  { value: 'Radiance of Azshara', label: 'Radiance of Azshara' },\r\n  { value: 'Lady Ashvane', label: 'Lady Ashvane' },\r\n  { value: 'Orgozoa', label: 'Orgozoa' },\r\n  { value: 'Queens Court', label: 'Queens Court' },\r\n  { value: `Za'qul`, label: `Za'qul` },\r\n  { value: 'Queen Azshara', label: 'Queen Azshara' }\r\n]\r\n\r\nconst store = createStore(temporalBoonReducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <Provider store={store}>\r\n        <Select\r\n          value={{ value: 'The Eternal Palace', label: 'The Eternal Palace' }}\r\n          isDisabled\r\n        />\r\n        <BossDropdown\r\n          options={items}\r\n        />\r\n        <BossTable />\r\n        <ActiveHealerDropdowns />\r\n        <TimelineGrid />\r\n      </Provider>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport _ from 'lodash';\r\n\r\n// eslint-disable-next-line no-extend-native\r\nArray.prototype.sortBy = (sortValues) => _.sortBy(this, sortValues);\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}